<div onload="doSetup()">
  <div class="response-cont container">
    <div class="res-operator">
      {{!-- <div class="form-edit" title="edit form">
        <img src="https://img.icons8.com/material-outlined/24/000000/edit--v1.png" />
      </div> --}}
      <div class="see-responses" title="see all responses" onclick="viewResponses()">
        <img src="https://img.icons8.com/material-sharp/24/000000/visible.png" />
      </div>
    </div>

    <div class="box form_title">
      <div id="title"></div>
      <div id="desc"></div>
    </div>

    <div class="loader">

    </div>
    <form id="main">

    </form>

  </div>
</div>

<script>
  const params = (new URL(document.location)).searchParams;
  var decrypted = atob(params.get('form_timestamp'));
  var form_timestamp = decrypted;
  var decrypted_title = atob(params.get('form_title'));
  var form_title = decrypted_title;

  let mainContainer = document.getElementById("main");
  const title = document.querySelector('#title');
  const desc = document.querySelector('#desc');
  title.innerHTML = form_title;
  // console.log(form_title,form_timestamp)

  //to check required field
  function fn(bool, e) {
    if (bool) {
      additional.childNodes[1].innerHTML += `<span class='star'>*</span>`;
      if (additional.className != "mcqType box") {
        additional.childNodes[3].setAttribute("data-id", "ok");
      }
    }
  }//end


  var docRef = db.collection('form').doc(form_timestamp);
  docRef.get().then((doc) => {
    desc.innerHTML = doc.data().desc;

  }).catch((error) => {
    console.log("Error getting document:", error);
  });

  const main = document.querySelector("#main");
  var roll_arr = []; //to save roll number
  var i = 0; //to save values in roll_arr
  var count = 1; //to count no of ques and their ans

  //extract questions
  docRef.collection("hi").get()
    .then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        var curr = doc.id;
        var len = curr.length;

        if (curr[len - 1] == 'T') {
          var qs = doc.data().qs;


          additional = document.createElement("div");
          additional.className = 'textType';
          additional.innerHTML += `
                      <p class="hi">  </p>
                      <div class="sample-text">
                            Type your answer here
                      </div>
                      <div class="seperator">
                      </div>
                      <div class="question-control">
                        <button type="button" id="response_details" data-id="curr" onclick="viewQueResponse(this)" style="margin-left: 6px;">View Details</button>
                        <div class="attempted">
                        
                        </div>
                      </div>
                   
                       `

          additional.classList.add("box");
          mainContainer.appendChild(additional);
          mainContainer.childNodes[count].childNodes[7].childNodes[1].setAttribute("data-id", curr);

          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;
          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);
          count++;
        }

        if (curr[len - 1] == 'U') {
          var qs = doc.data().qs;


          additional = document.createElement("div");
          additional.className = 'uploadType';
          additional.innerHTML = `
    
                    <p class="hi">Hi</p>
                     <div class="sample-text">
                      Upload file
                    </div>
                    <div class="seperator">

                    </div>
                    <div class="question-control">
                        <button type="button" onclick="viewQueResponse(this)" id="response_details" style="margin-left: 6px;">View Details</button>
                        <div class="attempted">
                        
                        </div>
                      </div>
                    `;

          additional.classList.add("box");
          mainContainer.appendChild(additional);
          mainContainer.childNodes[count].childNodes[7].childNodes[1].setAttribute("data-id", curr);

          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;
          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);
          count++;
        }

        if (curr[len - 1] == 'O') {
          var qs = doc.data().qs;


          additional = document.createElement("div");

          additional.className = "mcqType";
          additional.innerHTML = `
                    <p class="hi">Hi</p>
     
                    <div id="possible">
                      <div class="indivisual">

                      </div>
                    </div>
                    <div class="seperator"></div>
                    <div class="question-control">
                        <button type="button" onclick="viewQueResponse(this)" id="response_details" style="margin-left: 6px;">View Details</button>
                        <div class="attempted">
                        
                        </div>
                    </div>
                 `
          additional.classList.add("box");
          mainContainer.appendChild(additional);
          mainContainer.childNodes[count].childNodes[7].childNodes[1].setAttribute("data-id", curr);

          if (doc.data().type == 'single')
            qs += " <span style='color:rgb(84,79,79); font-size:14px'>(single correct type)</span>"
          else qs += " <span style='color:rgb(84,79,79); font-size:14px'>(multiple correct type)</span>"
          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;

          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);
          var option = doc.data().op;
          for (var i = 1; i <= option.length; i++) {
            var data = document.createElement('div');
            data.className = "prik";
            var opt = document.createElement('p');
            opt.classList.add('res-opts');
            opt.innerHTML = "  " + i + ") " + option[i - 1];
            data.appendChild(opt);
            mainContainer.childNodes[count].childNodes[3].childNodes[1].appendChild(data);
          }
          count++;
        }

        if (curr[len - 1] == 'S') {
          var qs = doc.data().qs;
          var lmin = doc.data().lmin;
          var lmax = doc.data().lmax;
          var min = doc.data().min;
          var max = doc.data().max;


          additional = document.createElement("div");
          additional.className = 'scaleType';
          additional.innerHTML += `
    
            <p class="hi">Hi </p>
            <div class="scale" style="display:flex; align-items:center; justify-content:left;" data-id="que-id"> 
              <span style="margin-right: 20px;">min</span>
              <span style="margin-left: 20px;">max</span>
            </div>

            <div class="seperator">
            </div>
            <div class="question-control">
              <button type="button" onclick="viewQueResponse(this)" id="response_details" style="margin-left: 6px;">View Details</button>
              <div class="attempted">
                  
              </div>
            </div>
            `;

          additional.classList.add("box");
          mainContainer.appendChild(additional);
          mainContainer.childNodes[count].childNodes[7].childNodes[1].setAttribute("data-id", curr);

          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;
          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);



          var scale = mainContainer.childNodes[count].childNodes[3];
          //scale.setAttribute("data-id", count);

          scale.childNodes[1].innerHTML = lmin;
          scale.childNodes[3].innerHTML = lmax;
          for (var i = max; i >= min; i--) {
            var data = document.createElement('div');
            data.className = "linearScale";
            data.classList.add(doc.id);
            var opt = document.createElement('input');
            opt.type = "radio";
            opt.name = "scale_opt";
            opt.value = i;
            var optname = document.createElement('p');
            optname.innerHTML = i;

            data.appendChild(optname);
            data.appendChild(opt);
            scale.insertBefore(data, scale.childNodes[3]);
          }
          count++;
        }

      });
      document.querySelector('.loader').style.display = "none";
    })
    .catch((error) => {
      console.log("Error getting documents: ", error);
    });

  //end


  var ansid = [], ans = [], r = 0, a = 0, count1 = [];
  //extract total number of responses

  docRef.collection('ans').get()
    .then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        roll_arr[r] = doc.id;
        r++;
      }); //extract roll no

      db.collection("form").doc(form_timestamp).collection("ans").doc(roll_arr[0]).collection("ans_1").get()
        .then((querySnapshot) => {
          querySnapshot.forEach((doc) => {
            ansid[a] = doc.id;
            a++;
          }); // extract ans id


          for (var r = 0; r < ansid.length; r++) {

            for (var j = 0; j < roll_arr.length; j++) {

              db.collection("form").doc(form_timestamp).collection("ans").doc(roll_arr[j]).collection("ans_1").doc(ansid[r]).get()
                .then((doc) => {
                  var curr1 = doc.id;
                  var len1 = curr1.length;
                  var countIndex = curr1[len1 - 3] - 1;
                  count1[countIndex] = count1[countIndex] || 0;


                  if (curr1[len1 - 1] == 'T') {
                    if (doc.data().ans != "")
                      count1[countIndex]++;
                  }

                  if (curr1[len1 - 1] == 'O') {
                    var op_ans = [];
                    op_ans = doc.data().ans;
                    for (var i = 0; i < op_ans.length; i++) {
                      if (op_ans[i] == true) {
                        count1[countIndex]++;
                        break;
                      }
                    }
                  }

                  if (curr1[len1 - 1] == 'U') {
                    if (doc.data().ans != "null")
                      count1[countIndex]++;
                  }

                  if (curr1[len1 - 1] == 'S') {
                    if (doc.data().ans != "")
                      count1[countIndex]++;
                  }


                });
            }
          }
        });
    });

  setTimeout(function () {
    for (var i = 0; i < count1.length; i++) {
      var ans_deatils = mainContainer.childNodes[i + 1].childNodes[7].childNodes[3];
      ans_deatils.innerHTML = "Student Attempted " + count1[i] + "/" + roll_arr.length;
    }
  }, 3000);

  function viewQueResponse(that) {
    
    if (count1.length == 0 || roll_arr.length == 0) {
      alert("There are no responses for this question")
    }
    else {
      queId = that.getAttribute('data-id');
      window.location.href = "/view_queresponse?form_timestamp=" + form_timestamp + "&form_title=" + form_title + "&que_Id=" + queId;
    }

  }

  function viewResponses() {
    if (roll_arr.length == 0) {
      alert("There are no responses for this form!")
    }
    else {
      window.location.href = "/view_response?form_timestamp=" + form_timestamp + "&form_title=" + form_title;
    }
  }

</script>