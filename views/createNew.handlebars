<div onload="doSetup()">

  {{!-- popup msg when a form created --}}
  <div class="container">
    <div class="box form_title">
      <input type="text" placeholder="Title of form" id="title" class="nullCheck">
      <input type="text" placeholder="Form description" id="desc" class="nullCheck">
    </div>

    <div class="icon-bar">
      <div class="add-elements">
        add
      </div>
      <i class="fa fa-outdent" aria-hidden="true" id="description" ></i>
      <i class="fa fa-list-ol ic" aria-hidden="true" id="multiple"></i>
      <i class="fa fa-paragraph ic" aria-hidden="true" id="paragraph"></i>
      <i class="fa fa-file ic" aria-hidden="true" id="fileUpload"></i>
      <i class="fa fa-sort-numeric-desc ic" aria-hidden="true" id="linearscale"></i>
    </div>

    <form id="main">
      {{!-- <div class="box">
        <input type="text" placeholder="Question" class="nullCheck" />
        <div class="sample-text">
          Type your answer here
        </div>


        <div class="seperator">

        </div>
        <div class="question-control">
          <button class="up" onclick="upar(parentNode.parentNode)" type="button"><i class="fa fa-arrow-up"
              aria-hidden="true"></i></button>
          <button class="down" onclick="niche(parentNode.parentNode)" type="button"><i class="fa fa-arrow-down"
              aria-hidden="true"></i></button>
          <div class="required">
            <span>Required</span>
            <input type="checkbox"  class="checkbox" />
            <label  class="toggle" onclick="fn(this)">
              <label class="toggleHelper" ></label>
            </label>
          </div>
          <div class="delete"><i class="fa fa-trash-o add" aria-hidden="true"></i></div>
          <div class="copy_question">
            <i class="fa fa-clone" aria-hidden="true"></i>
          </div>
          <div class="add_picture">
            <i class="fa fa-picture-o" aria-hidden="true"></i>
          </div>
        </div>
      </div> --}}
    </form>
      <div id="loader">

        </div>

    <div class="result">
      <div class="create-button" id="submit_form">Create</div>
      
        <div class="cancel-button" id="cancel_form" onclick="hi()">Cancel</div>
      
    </div>
  </div>
</div>

<script>
  
  function hi(){window.location.href="/form"};

  let addDescription = document.getElementById('description');
  let addMCQQuestion = document.getElementById('multiple');
  let addParaQuestion = document.getElementById('paragraph');
  let fileUploadQuestion = document.getElementById('fileUpload');
  let linearScale = document.getElementById('linearscale');
  let mainContainer = document.getElementById("main");
  let body1 = document.getElementsByTagName('body');
  let deleteButtons = document.getElementsByClassName("delete");
  let shuffle = document.getElementById('shuffle');
  let byebye = document.getElementsByClassName('option_delete');
  // rearrange up
  function upar(element) {
    if (element.previousElementSibling) {
      element.parentNode.insertBefore(element, element.previousElementSibling);
    }
  }

  //rearrange down
  function niche(element) {

    if (element.nextElementSibling) {
      element.parentNode.insertBefore(element.nextElementSibling, element);
    }
  }
  function doSetup() {
    setupDeleteButtons();
    //setupToggles();
  }

  let getSiblings = function (e) {
    let siblings = [];
    if (!e.parentNode) {
      return siblings;
    }
    let sibling = e.parentNode.firstChild;

    while (sibling) {
      if (sibling.nodeType === 1 && sibling !== e) {
        siblings.push(sibling);
      }
      sibling = sibling.nextSibling;
    }
    return siblings;
  };

  function setupDeleteButtons() {
    for (gone of deleteButtons) {
      gone.addEventListener('click', (e) => {
        e.target.closest('div.box').remove()
      })
    }
  }

  function setupCopyButtons(pr, type = "") {
    //console.log(pr.className);
    var n1 = 9, n2 = 9
    if (type == 'mcq') {
      n1 = 11
      n2 = 11
    }
    if (type == 'scale') {
      n1 = 11
      n2 = 9
    }
    if(type=='desc')
    {
      n1=7;
      n2=7;
    }
    //console.log(pr.childNodes[n1].className);

    pr.childNodes[n1].childNodes[n2].addEventListener('click', (evt) => {
      el = evt.currentTarget.parentNode.parentNode
      var tp = ""
      var newel = el.cloneNode(true);
      el.parentNode.insertBefore(newel, el.nextSibling)
      if (el.classList.contains('scaleType'))
        tp = 'scale'
      if(el.classList.contains('descType'))
      {
        tp='desc';
      }  
      if (el.classList.contains('mcqType')) {
        tp = 'mcq'
      

        let options = document.getElementsByClassName('option');
        options[options.length - 1].addEventListener('click', (e) => {
          cheating = document.createElement("div");
          cheating.classList.add('indivisual')
          cheating.innerHTML = ` <input class="option-input nullCheck" placeholder = "Option"><button class="option_delete";>X</button>`;
          e.target.parentElement.nextElementSibling.appendChild(cheating);
          for (option_delete of byebye) {
            option_delete.addEventListener('click', (e) => {
              e.target.closest('div').remove();
            })
          }
        })
      }
      setupCopyButtons(newel, tp)
      setupDeleteButtons();
      if(!el.classList.contains('descType'))
      setupToggles();
    })
  }


  function hasClass(element, className) {
    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
  }

  function setupToggles() {
    let toggles = document.getElementsByClassName("toggle");
    let toggleHelpers = document.getElementsByClassName("toggleHelper");

    toggleHelpers[toggleHelpers.length - 1].addEventListener('click', (e) => {
      
      e.stopPropagation();
    })

    toggles[toggles.length - 1].addEventListener('click', (e) => {
      var currEl = e.target;
      let siblings = getSiblings(currEl);

      if (!siblings[0].checked) {
        currEl.style.backgroundColor = 'rgb(111, 217, 243)';
        currEl.style.border = "2px solid rgb(111, 217, 243)";
        currEl.firstChild.nextElementSibling.style.left = "15px"
      }
      else {
        currEl.style.backgroundColor = 'white';
        currEl.style.border = " 2px solid gray";
        currEl.firstChild.nextElementSibling.style.left = "-5px"
      }
      siblings[0].checked = !siblings[0].checked;
    })
  }

  function desc_text_setup(e)
  {  var img_erase=e.parentNode;
    var img=img_erase.querySelector(".img_qs");
    img.value="";
    ////img.value="" necessary becoz on upload there is onchange fn which blocks upload of same file again. 
    e.parentNode.previousElementSibling.previousElementSibling.childNodes[1].src="";
    //console.log(e.parentNode.previousElementSibling.previousElementSibling.childNodes[1].className);
      e.parentNode.previousElementSibling.innerHTML=`
      <input type="text" class="hui" placeholder="Text"  />
      `;
      e.parentNode.previousElementSibling.childNodes[1].value="";
      e.parentNode.previousElementSibling.className="txt";

  }
  function desc_videoLimk_setup(e)
  {
    var img_erase=e.parentNode;
    var img=img_erase.querySelector(".img_qs");
    img.value="";
    e.parentNode.previousElementSibling.previousElementSibling.childNodes[1].src="";
    e.parentNode.previousElementSibling.innerHTML=`
    <input type="text" class="hui" placeholder="Embed Url"  />
     <button type="button" class="but" onclick="desc_videoLimk_set_url(this)" class="iuh" > set url</button>
    `
    e.parentNode.previousElementSibling.childNodes[1].value="";
    e.parentNode.previousElementSibling.className="limk_setup";

  }

  function desc_videoLimk_set_url(e)
  {
    //console.log(e.previousElementSibling.previousElementSibling.childNodes[1].id);
    
    var x=e.previousElementSibling.value;
    var p=e.parentNode;
    p.innerHTML=`
    <iframe width="560" height="315" src="" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
//console.log(e.previousElementSibling.value);
p.childNodes[1].src=x;
p.className="iframe";

   

  }

  function loadFile(nodee, img_here) {  //nodee.parentNode.innerHTML+="ok";
   var image = nodee.parentNode.parentNode.parentNode.parentNode;
    
     if(nodee.parentNode.parentNode.parentNode.parentNode.className=="descType box")
     {
       image.childNodes[5].innerHTML=``;
     }
    //console.log(image.className);
    var g = image.querySelector(".img_show");
    //console.log(g.className);
    g.querySelector("img").src = URL.createObjectURL(img_here.target.files[0]);
  }


  addDescription.addEventListener('click', () => {
     //alert("description feature blocked currently :( under error removal process");
    
    additional = document.createElement("div");
    additional.className = 'descType';
    additional.innerHTML = `
    <input type="text" placeholder="Description" class="nullCheck" />
       <div class="img_show">
        <img src="" style="width:100%">
      </div>
     
      <div></div>

       <div class="question-control">
        
     
        
        
      <div class="text" onclick="desc_text_setup(this)"><i class="fa fa-font" aria-hidden="true"></i></div>

          <div class="videoLimk" onclick="desc_videoLimk_setup(this)"><i class="fa fa-youtube" aria-hidden="true"></i></div>

       <div class="delete"><i class="fa fa-trash-o add" aria-hidden="true"></i></div>
        <div class="copy_question">
          <i class="fa fa-clone" aria-hidden="true"></i>
        </div>
      
          <div class="add_picture">
         <label style="cursor: pointer;"><input type="file" class="img_qs"  accept="image/*" placeholder="Upload Image"  onchange="loadFile(this,event)" style="display:none;"> <i class="fa fa-picture-o" aria-hidden="true" ></i></label>
          
          </div>
          </div>
      </div>

    `
    additional.classList.add("box");
    mainContainer.appendChild(additional);
    setupDeleteButtons();

    setupCopyButtons(additional, "desc");
    
  })
  addParaQuestion.addEventListener('click', () => {
    additional = document.createElement("div");
    additional.className = 'textType';
    additional.innerHTML = `
      <input type="text" placeholder="Question" class="nullCheck" />
      <div class="img_show">
        <img src="" style="width:100%">
      </div>
      <div class="sample-text">
        Type your answer here
      </div>
       
      
      <div class="seperator">

      </div>
      <div class="question-control">
        <button class="up" onclick="upar(parentNode.parentNode)" type="button"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>
        <button class="down" onclick="niche(parentNode.parentNode)" type="button"><i class="fa fa-arrow-down" aria-hidden="true"></i></button>
        <div class="required">
          <span>Required</span>
          <input type="checkbox"  class="checkbox"  />
          <label   class="toggle" onclick="fn(this)" >
          <label class="toggleHelper" onclick="fn1(this)" ></label>
         
        </label>
        </div>
        <div class="delete"><i class="fa fa-trash-o add" aria-hidden="true"></i></div>
        <div class="copy_question">
          <i class="fa fa-clone" aria-hidden="true"></i>
        </div>
      
          <div class="add_picture">
         <label style="cursor: pointer;"><input type="file" class="img_qs"  accept="image/*" placeholder="Upload Image"  onchange="loadFile(this,event)" style="display:none;"> <i class="fa fa-picture-o" aria-hidden="true" ></i></label>
          
          </div>
      </div>
  `
    additional.classList.add("box");
    mainContainer.appendChild(additional);
    setupDeleteButtons();
    setupToggles();
    setupCopyButtons(additional);
  });


  fileUploadQuestion.addEventListener('click', () => {
    additional = document.createElement("div");
    additional.className = "uploadType";
    additional.innerHTML = `
    <input type="text" placeholder="Question" class="nullCheck">
    <div class="img_show">
        <img src="" style="width:100%">
      </div>
    <div class="sample-text">
      Upload file
    </div>
    <div class="seperator">
    </div>
    <div class="question-control">
      <button class="up" onclick="upar(parentNode.parentNode)" type="button"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>
      <button class="down" onclick="niche(parentNode.parentNode)" type="button"><i class="fa fa-arrow-down" aria-hidden="true"></i></button>
      <div class="required">
        <span>Required</span>
         <input type="checkbox"  class="checkbox"  />
          <label   class="toggle" onclick="fn(this)" >
        <label class="toggleHelper" onclick="fn1(this)"></label>
        
      </label>
      </div>
      <div class="delete"><i class="fa fa-trash-o" aria-hidden="true"></i></div>
      <div class="copy_question">
          <i class="fa fa-clone" aria-hidden="true"></i>
        </div>
        <div class="add_picture">
         <label style="cursor: pointer;"><input type="file" class="img_qs"  accept="image/*" placeholder="Upload Image"  onchange="loadFile(this,event)" style="display:none;"> <i class="fa fa-picture-o" aria-hidden="true" ></i></label>
          
          </div>
    </div>
  `
    additional.classList.add("box");
    mainContainer.appendChild(additional);
    setupDeleteButtons();
    setupToggles();
    setupCopyButtons(additional);
  });

  addMCQQuestion.addEventListener('click', () => {
    additional = document.createElement("div");

    additional.className = "mcqType";
    additional.innerHTML = `
      <input  type="text" placeholder="Question" class="nullCheck">
      <div class="img_show">
        <img src="" style="width:100%">
      </div>
      <div class="plus"><i class="fa fa-plus option" aria-hidden="true"></i></div>
      <div id="possible">
        <div class="indivisual">
          <input class="option-input nullCheck"  placeholder = "Option"><button type="button" class="option_delete">X</button>
        </div>
      </div>
      <div class="seperator"></div>
      <div class="question-control" style="height:150px;">
        <div class="opt-type">
          <label for="type">single correct</label>
          <input type="checkbox" id="type" name="type"></input>
        </div>
        <button class="up" onclick="upar(parentNode.parentNode)" type="button"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>
        <button class="down" onclick="niche(parentNode.parentNode)" type="button"><i class="fa fa-arrow-down" aria-hidden="true"></i></button>
        <div class="required">
          <span>Required</span>
          <input type="checkbox"  class="checkbox" />
          <label  class="toggle" onclick="fn(this)">
          <label class="toggleHelper" onclick="fn1(this)" ></label>
        </label>
        </div>

        <div class="delete"><i class="fa fa-trash-o" aria-hidden="true"></i></div>
        <div class="copy_question">
          <i class="fa fa-clone" aria-hidden="true"></i>
        </div>
       <div class="add_picture">
         <label style="cursor: pointer;"><input type="file" class="img_qs"  accept="image/*" placeholder="Upload Image"  onchange="loadFile(this,event)" style="display:none;"> <i class="fa fa-picture-o" aria-hidden="true" ></i></label>
          
          </div>
          
      </div>`
    additional.classList.add("box");
    mainContainer.appendChild(additional);
    let possible = document.getElementById('possible');
    let options = document.getElementsByClassName('option');
    tog = document.getElementsByClassName('toggle');


    options[options.length - 1].addEventListener('click', (e) => {
      cheating = document.createElement("div");
      cheating.classList.add('indivisual')
      cheating.innerHTML = ` <input class="option-input nullCheck" placeholder = "Option"><button class="option_delete"   type="button">X</button>`;
      e.target.parentElement.nextElementSibling.appendChild(cheating);
      for (option_delete of byebye) {
        option_delete.addEventListener('click', (e) => {
          e.target.closest('div').remove();
        })
      }
    })
    setupDeleteButtons();
    setupToggles();
    setupCopyButtons(additional, "mcq");
  })

  linearScale.addEventListener('click', () => {
     //alert("scalean feature blocked currently :( under error removal process");
    
    additional = document.createElement("div");
    additional.className = 'scaleType';
    additional.innerHTML = `
      <input type="text" placeholder="Question" class="nullCheck" />
      <div style="margin: 10px 10px;">
        <select id="minValue" name="minValue">
          <option value="0">0</option>
          <option value="1">1</option>
        </select>
        <span> to </span>
        <select id="maxValue" name="maxValue">
          <option value="2">2</option>
          <option value="3">3</option>
          <option value="4">4</option>
          <option value="5" selected="selected">5</option>
          <option value="6">6</option>
          <option value="7">7</option>
          <option value="8">8</option>
          <option value="9">9</option>
          <option value="10">10</option>
        </select>
      </div>

       <input type="text" id="minLable" class="nullCheck" placeholder="Label(min value) optional"/>
       <input type="text" id="maxLable" class="nullCheck" placeholder="Label(max value) optional"/>

      <div class="seperator">

      </div>
      <div class="question-control">
        <button class="up" onclick="upar(parentNode.parentNode)" type="button"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>
        <button class="down" onclick="niche(parentNode.parentNode)" type="button"><i class="fa fa-arrow-down" aria-hidden="true"></i></button>
         <div class="required">
        <span>Required</span>
         <input type="checkbox"  class="checkbox"  />
          <label   class="toggle" onclick="fn(this)" >
        <label class="toggleHelper" onclick="fn1(this)" ></label>
        
      </label>
      </div>
        <div class="delete"><i class="fa fa-trash-o add" aria-hidden="true"></i></div>
        <div class="copy_question" id="element">
          <i class="fa fa-clone" aria-hidden="true"></i>
        </div>
      </div>
  `
    additional.classList.add("box");
    mainContainer.appendChild(additional);
    setupDeleteButtons();
    setupToggles();
    setupCopyButtons(additional, "scale");
    
  });


  let possible = document.getElementById('possible');
  let options = document.getElementsByClassName('option');
  let gayab = document.getElementsByClassName('indivisual');
  const form = document.getElementById("main");
  const button = document.querySelector("#submit_form");
  const title = document.getElementById("title");
  const desc = document.getElementById("desc");
  const req = document.getElementById("switch");

  //this se pass kra element kooo
  function fn(this_reference) {
    this_reference.previousElementSibling.checked = !this_reference.previousElementSibling.checked;
  //  console.log(this_reference.previousElementSibling.checked );
  }
  function fn1(this_ref){
    //console.log(this_ref.parentNode);
   this_ref.parentNode.click();
  } 
  function null_check() {
    var text_feilds = document.getElementsByClassName("nullCheck");
    for (var i = 0; i < text_feilds.length; i++) {
      if (text_feilds[i].value == "") {
        text_feilds[i].scrollIntoView({ behavior: 'smooth', block: 'end' });
        alert("Some questions are still empty!");
        return false;
      }
    }
    return true;
  }

  var previous_roll_no = [];
  db.collection("form").get().then((querySnapshot) => {
    querySnapshot.forEach((doc) => {
      var p = doc.id;
      previous_roll_no.push(p);
    });
  });

  var roll_number = document.getElementById("title");

  function previous_roll_check() {
    for (var i = 0; i < previous_roll_no.length; i++) {
      if (roll_number.value == previous_roll_no[i]) {
        roll_number.scrollIntoView({ behavior: 'smooth', block: 'end' });
        alert("Title " + roll_number.value + " already used ");

        return false;
      }
    }
    return true;
  }

  var count = 1;
  var today = new Date();
  var dd = String(today.getDate()).padStart(2, '0');
  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
  var yyyy = today.getFullYear();

  today = mm + '/' + dd + '/' + yyyy;

  button.addEventListener('click',
    (e) => {
      if (document.querySelectorAll('div.box').length > 1) {
        var ch = null_check();




        if (ch && previous_roll_check()) {

          //console.log(document.getElementById('loader'))
          document.getElementById('loader').style.display = "block";
          document.getElementById('submit_form').disabled=true;
          document.getElementById('submit_form').style.backgroundColor='gray'
          document.getElementById('cancel_form').disabled=true;
          document.getElementById('cancel_form').style.backgroundColor='gray'
          
           
          var timestamp = String(new Date().getTime());
          console.log(timestamp);
          db.collection('form').doc(timestamp).set({
            title: title.value,
            desc: desc.value,
            date: today,

          });
          var promises = [];
          var count=1;
          for (var child = form.firstChild; child != null; child = child.nextSibling) {
            
            

         

            let storageRef = firebase.storage().ref(timestamp + "/" + "img_qs" + "/" + count);

            var image_name = "null";
            console.log(document.getElementsByClassName("img_qs").length);
            if(child.className != 'scaleType box' && document.getElementsByClassName("img_qs").length!=0){
             //console.log(document.getElementsByClassName("img_qs"));
            var file = document.getElementsByClassName("img_qs")[count - 1].files[0];
           
            if (file != undefined) {
              image_name = file.name;

              let this_ref = storageRef.child(image_name);

              promises.push(this_ref.put(file).then(res => {
              }).catch(e => {
                console.log('error uploading' + e);
              }))
            }
            }
            //desc type
            if(child.className == 'descType box')
            { var x=true;
              var temp=count+"_D";
              var vimdeo="null";
              var txt="null";
              if(image_name=="null")
              {
                   if(child.childNodes[5].className=='iframe')
                   {
                      vimdeo=child.childNodes[5].childNodes[1].src;
                   }
                   if(child.childNodes[5].className=='txt')
                   {
                    txt =child.childNodes[5].childNodes[1].value;
                   }
              }
              promises.push(db.collection('form').doc(timestamp).collection("hi").doc(temp).set({
                desc: child.childNodes[1].value,
                req: x,
                img: image_name,
                vid:vimdeo,
                tex:txt,


              }))
              count++;
            }
            //text type
            if (child.className == 'textType box') {
              var temp = count + "_T";
              promises.push(db.collection('form').doc(timestamp).collection("hi").doc(temp).set({
                qs: child.childNodes[1].value,
                req: child.childNodes[9].childNodes[5].childNodes[3].checked,
                img: image_name
              }))


              count++;
            }

            //mcq type
            if (child.className == 'mcqType box') {
              var temp = count + "_O";
              var num = 1;
              var l = [];

              var n = 0;

              for (var num = 1; child.childNodes[7].childNodes[num] != null; num++) {
                l[n] = child.childNodes[7].childNodes[num].childNodes[1].value;
                n++;
                if (num == 1)
                  num += 1;
              }

              var mcqt = (child.childNodes[11].childNodes[1].childNodes[3].checked) ? 'single' : 'multiple'
              promises.push(db.collection('form').doc(timestamp).collection("hi").doc(temp).set({
                qs: child.childNodes[1].value,
                op: l,
                req: child.childNodes[11].childNodes[7].childNodes[3].checked,
                type: mcqt,
                img: image_name
              }));
              count++;
            }

            //upload file
            if (child.className == 'uploadType box') {
              var temp = count + "_U";
              promises.push(db.collection('form').doc(timestamp).collection("hi").doc(temp).set({
                qs: child.childNodes[1].value,
                req: child.childNodes[9].childNodes[5].childNodes[3].checked,
                img: image_name
              }));
              count++;
            }

            //linear scale
            if (child.className == 'scaleType box') {
              var temp = count + "_S";
              var child2 = child.childNodes[3].childNodes;
              console.log(child2);

              promises.push(db.collection('form').doc(timestamp).collection("hi").doc(temp).set({
                qs: child.childNodes[1].value,
                min: child.childNodes[3].childNodes[1].value,
                max: child.childNodes[3].childNodes[5].value,
                lmin: child.childNodes[5].value,
                lmax: child.childNodes[7].value,
                req: child.childNodes[11].childNodes[5].childNodes[3].checked,
                img: image_name
              }));
              count++;
           
            } 
          }
          Promise.all(promises)
            .then((uploadedMediaList) => {
              document.querySelector('body').innerHTML = ` 
            <div class=" onCreateMsg" style="background-color: rgb(239, 241, 231); border: 2px solid green;  margin-left: auto;
    margin-right: auto;
    width: 16rem">
            <h1>Great! Your form has been successfully created.</h1>
            <p>Go to <a href="/form">Your Forms</a> page to manage your form.</p>
            </div>
            `;
            })
            .catch((err) => alert(err.code));

        }
      }
      else {
        alert("There should be atleast one question in a form!")
      }
    }
  );
</script>