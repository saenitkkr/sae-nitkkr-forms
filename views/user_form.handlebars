<div onload="doSetup()">
  <div class="container">
    <div class="box form_title">
      <div id="title"></div>
      <div id="desc"></div>
    </div>

    <form id="main">
      <input type="number" min="1" class="ID" id="op" data-id="ok" placeholder="Roll Number" required>
    </form>
     <div class="loader">
           
        </div>
    <div class="result">
      <div class="create-button" id="submit_form" type="submit">Submit</div>
    </div>
  </div>
</div>
<script>


  const params = (new URL(document.location)).searchParams;
  var decrypted = atob(params.get('form_title'));
  var form_title = decrypted;
</script>

<script>
  let mainContainer = document.getElementById("main");
  const title = document.querySelector('#title');
  const desc = document.querySelector('#desc');
  title.innerHTML = form_title;
 
 let getAllOpts = function (e) {
    let siblings = []; 

    // if no parent, return no sibling
    if(!e.parentNode) {
        return siblings;
    }
    // first child of the parent node
    let sibling  = e.parentNode.parentNode.firstChild;
    
    // collecting siblings
    while (sibling) {
        if (sibling.nodeType === 1 && sibling !== e) {
            siblings.push(sibling.firstChild);
        }
        sibling = sibling.nextSibling;
    }
    return siblings;
};

  function textAreaAdjust(element) {
    element.style.height = "1px";
    element.style.height = (10+element.scrollHeight)+"px";
  }
  function fn(bool, e) { 
    if (bool) {
      additional.childNodes[1].innerHTML += `<span class='star'>*</span>`;
      
      if (additional.className != "mcqType box") {
        additional.childNodes[3].setAttribute("data-id", "ok");
      }
    }
  }

  function null_check() {

    let li = document.querySelectorAll("[data-id=\'" + "ok" + "\']");
    for (var i = 0; i < li.length; i++) {

      if (li[i].type == "number") {
        if (li[i].value == 0) { 
          li[i].scrollIntoView({ behavior: 'smooth', block: 'end' });
          alert("fill up required feilds");
          return false;
        }
      }

      if (li[i].type == "textarea") {
        if (li[i].value == "") {
          li[i].scrollIntoView({ behavior: 'smooth', block: 'end' });
          alert("fill up required feilds");
          return false;
        }
      }


      if (li[i].type == "file") { 
        if (li[i].files.length == 0) {
          li[i].scrollIntoView({ behavior: 'smooth', block: 'end' });
          alert("fill up required feilds");
          return false;
        }
      }
    }
    return true;
  }


  var docRef = db.collection('form').doc(title.innerHTML);
  var previous_roll_no = [];
  var count = 3;

  docRef.get().then((doc) => {
    desc.innerHTML = doc.data().desc;
  }).catch((error) => {
    console.log("Error getting document:", error);
  });
  

  docRef.collection("ans").get().then((querySnapshot) => {
    querySnapshot.forEach((doc) => {
      var p = doc.id;
      previous_roll_no.push(p);
    });
  });

  docRef.collection("hi").get()
    .then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        var curr = doc.id;
        var len = curr.length;

        if (curr[len - 1] == 'T') {
          var qs = doc.data().qs;

          additional = document.createElement("div");
          additional.className = 'textType';
          additional.innerHTML += `
    
            <p class="hi">Hi </p>
            <textarea type="text"  onkeyup="textAreaAdjust(this)" class="sample-text" oncopy="return false" onpaste="return false" oncut="return false" placeholder="Type your answer here" style="width:100%;resize:none;height:50px;"></textarea>
        
            <div class="seperator">
            </div>
            <div class="question-control">    
            </div>
            `;

          additional.classList.add("box");
          mainContainer.appendChild(additional);

          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;
          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);

          count++;
        }

        if (curr[len - 1] == 'U') {
          var qs = doc.data().qs;

          additional = document.createElement("div");
          additional.className = 'uploadType';
          additional.innerHTML = `
    
            <p class="hi">Hi</p>
            <input type="file" class="sample-text" >
             
            <div class="seperator">

            </div>
            <div class="question-control">
            </div>
            `;

          additional.classList.add("box");
          mainContainer.appendChild(additional);

          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;
          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);

          count++;

        }

        if (curr[len - 1] == 'O') {
          var qs = doc.data().qs;
          
          additional = document.createElement("div");
          additional.className = "mcqType";
          additional.innerHTML = `
            <p class="hi">Hi</p>
     
            <div id="possible">
            <div class="indivisual">
            </div>
            </div>

            <div class="seperator"></div>
            <div class="question-control">
            </div>`;
          additional.classList.add("box");
          mainContainer.appendChild(additional);
          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;


          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);
          var option = doc.data().op;
          var oplist = []
          for (var i = 1; i <= option.length; i++) {
            var data = document.createElement('div');
            data.className = "prik"
            data.classList.add(doc.id)
            var p2 = document.createElement('input');
            p2.type = "checkbox";
            p2.name = "options_here";
            var opt = document.createElement('p');
            opt.innerHTML = "    " + option[i - 1];
            data.appendChild(p2);
            data.appendChild(opt);
            oplist.push(p2)
            mainContainer.childNodes[count].childNodes[3].childNodes[1].appendChild(data);
          }
          oplist.forEach((ol)=>{
            if(doc.data().type == 'single'){
              ol.addEventListener('click', checkSelections)
            }
          })
          count++;
        }

        if (curr[len - 1] == 'S') {
          var qs = doc.data().qs;
          var lmin = doc.data().lmin;
          var lmax = doc.data().lmax;
          var min = doc.data().min;
          var max = doc.data().max;

          additional = document.createElement("div");
          additional.className = 'scaleType';
          additional.innerHTML += `
    
            <p class="hi">Hi </p>
            <div class="scale" style="display:flex; align-items:center; justify-content:center;"> 
              <span style="margin-right: 20px;">min</span>
              <span style="margin-left: 20px;">max</span>
            </div>

           

            <div class="seperator">
            </div>
            <div class="question-control">    
            </div>
            `;

          additional.classList.add("box");
          mainContainer.appendChild(additional);
          mainContainer.childNodes[count].childNodes[1].innerHTML = qs;
          fn(doc.data().req, mainContainer.childNodes[count].childNodes[1]);

          var scale = document.querySelector(".scale");
          scale.childNodes[1].innerHTML = lmin;
          scale.childNodes[3].innerHTML = lmax;
          for(var i = max; i>=min; i--)
          {
            var data = document.createElement('div');
            data.className = "linearScale";
            data.classList.add(doc.id);
            var opt = document.createElement('input');
            opt.type = "radio";
            opt.name = "scale_opt";
            opt.value= i;
            var optname = document.createElement('p');
            optname.innerHTML = i;

            data.appendChild(optname);
            data.appendChild(opt);
            scale.insertBefore(data, scale.childNodes[3]);
          }
          count++;
        }

      });
      document.querySelector('.loader').style.display="none";
    })
    .catch((error) => {
      console.log("Error getting documents: ", error);
    });

    //check for selection for single correct mcq type
    function checkSelections(evt){
      var ol = evt.currentTarget
      var sibs = getAllOpts(ol);
      sibs.forEach((item) => {
          if (item !== ol) item.checked = false
      })
    }
</script>


<script>
  var roll_number = document.getElementById("op");

  function previous_roll_check() {
    for (var i = 0; i < previous_roll_no.length; i++) {
      if (roll_number.value == previous_roll_no[i]) {
        roll_number.scrollIntoView({ behavior: 'smooth', block: 'end' });
        alert("Roll no " + roll_number.value + " already used ");
        return false;
      }
    }
    return true;
  }

</script>


<script>

  const form = document.getElementById("main");
  const button = document.querySelector("#submit_form");
  const req = document.getElementById("switch");

  var count1 = 1;

  button.addEventListener('click',
    (e) => {

      if (null_check() && previous_roll_check()) {
    
        var ID;
        for (var child = form.firstChild; child !== null; child = child.nextSibling) {
          if (child.className == 'ID') {
            ID = child.value;
            db.collection("form").doc(title.innerHTML).collection("ans").doc(ID).set({
              roll: ID,
            });
          }


          //text type
          if (child.className == 'textType box') {
            db.collection('form').doc(title.innerHTML).collection("ans").doc(ID).collection("ans_1").doc(String(count1) + "_T").set({
              ans: child.childNodes[3].value,
            });
            count1++;
          }

          //mcq type
          if (child.className == 'mcqType box') {
            var mcq_ans = [];
            for (var i = 1; child.childNodes[3].childNodes[1].childNodes[i] != null; i++) {
              mcq_ans[i - 1] = child.childNodes[3].childNodes[1].childNodes[i].childNodes[0].checked;

            }
            db.collection('form').doc(title.innerHTML).collection("ans").doc(ID).collection("ans_1").doc(String(count1) + "_O").set({
              ans: mcq_ans,

            });
            count1++;
          }


          //upload file
          let storageRef = firebase.storage().ref(title.innerHTML + "/" + ID + "/" + count1);

          if (child.className == 'uploadType box') {

            let file = child.childNodes[3].files[0];
            let this_ref = storageRef.child('ans');

            this_ref.put(file).then(res => {
            }).catch(e => {
              console.log('error uploading' + e);
            })

            db.collection('form').doc(title.innerHTML).collection("ans").doc(ID).collection("ans_1").doc(String(count1) + "_U").set({
              ans: "pdf",

            });

            count1++;
          }

          //linear scale
          if (child.className == 'scaleType box') {
            for(var i=3; child.childNodes[3].childNodes[i].childNodes[1]!=null; i++)
            {
              
              if(child.childNodes[3].childNodes[i].childNodes[1].checked == true)
              {
                console.log(child.childNodes[3].childNodes[i].childNodes[1].value)
                var lans = child.childNodes[3].childNodes[i].childNodes[1].value;
              }
            }
            db.collection('form').doc(title.innerHTML).collection("ans").doc(ID).collection("ans_1").doc(String(count1) + "_S").set({
              ans: lans,

            });
            count1++;
          }

        }
        document.write(`<div class="container">
        <div class="box form_title" style="background-color: rgb(239, 241, 231); border: 2px solid green; padding-left: 10px;">
        <h1>Thank You</h1>
        <p>Thank you for submitting your response.</p>
        </div>
        </div>`);
      }

    })

</script>
